//Generated by wsdl2apex-plus
#* @vtlvariable name="ApexUtility" type="com.deviousbard.salesforce.wsdl.ApexUtility" *# #* @vtlvariable name="wsdl" type="com.deviousbard.salesforce.wsdl.WsdlDefinition" *# #* @vtlvariable name="schema" type="com.deviousbard.salesforce.wsdl.SchemaDefinition" *#
public class ${schema.name} {

#foreach($type in $schema.complexTypes)
    // Complex Type Definition:  ${type.name}
    public class ${type.name} {
#foreach($element in $type.elements)
#if($element.baseType)
#if($element.required)
        public ${element.apexType} ${element.name} {
            get {
                if (${element.name} == null) {
                    throw new ${schema.name}.SchemaValidationException('Element "${element.name}" is required.');
                }
                return ${element.name};
            }
            set;
        }
#else
        public ${element.apexType} ${element.name};
#end
#end
#if($element.simpleType)
        public ${element.simpleTypeApexType} ${element.name} {
#if($element.required && not($element.nilable))
            get {
                if (${element.name} == null) {
                    throw new ${schema.name}.SchemaValidationException('Element "${element.name}" is required.');
                }
                return ${element.name};
            }
#else
            get;
#end
            set {
                new ${element.apexType}().validate(value, '${element.name}');
                ${element.name} = value;
            }
        }
#end
#if($element.complexType)
        public ${element.apexType}#if($element.multiOccurring)[]#end ${element.name};
#end
#end
#foreach($attribute in $type.attributes)
        public String ${attribute.name}#if($attribute.hasFixedValue) = '${attribute.fixedValue}'#end#if($attribute.hasDefaultValue) = '${attribute.defaultValue}'#end;
#end
#foreach($element in $type.elements)
        private String[] ${element.name}_type_info = new String[] {'${element.name}','${element.elementNamespace}','${element.type}','${element.minOccurs}', '${element.maxOccurs}','${element.nilable}'};
#end
#foreach($attribute in $type.attributes)
        private String[] ${attribute.name}_att_info = new String[] {'${attribute.name}'};
#end
        private String[] apex_schema_type_info = new String[] {'${schema.namespace}','${schema.elementFormQualified}','${schema.attributeFormQualified}'};
        private String[] field_order_type_info = new String[] {#foreach($element in $type.elements)'${element.name}'#if($foreach.hasNext),#end#end};
    }

#end

#foreach($type in $schema.simpleTypes)
    // Simple Type Definition:  ${type.name}
    public class ${type.name} {
#if($type.enumerated)
        Set<String> enumerations = new Set<String> {#foreach($enumeration in $type.enumerations)'${enumeration}'#if($foreach.hasNext),#end#end};
#end
        public void validate(${type.apexType} value, String elementName) {
#if($type.minLengthRestricted)
            if (value != null && value.length() < ${type.minLength}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is too short for "${type.name}". The minimum length is ${type.minLength}');
            }
#end
#if($type.maxLengthRestricted)
            if (value != null && value.length() > ${type.maxLength}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is too long for "${type.name}". The maximum length is ${type.maxLength}');
            }
#end
#if($type.lengthRestricted)
            if (value != null && value.length() != ${type.length}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" length is invalid for "${type.name}". The length must be exactly ${type.length}');
            }
#end
#if($type.enumerated)
            if (value != null && !enumerations.contains(value)) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is not a valid value for "${type.name}"');
            }
#end
#if($type.regexPatternRestricted)
            if (value != null && !Pattern.matches('${type.regexPattern}', value)) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" for "${type.name}" does not match the pattern "${type.regexPattern}"');
            }
#end
        }
    }
#end

    public class SchemaValidationException extends Exception {
    }
}
