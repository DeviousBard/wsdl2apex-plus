//Generated by wsdl2apex-plus
#* @vtlvariable name="ApexUtility" type="com.deviousbard.salesforce.wsdl.ApexUtility" *# #* @vtlvariable name="wsdl" type="com.deviousbard.salesforce.wsdl.WsdlDefinition" *# #* @vtlvariable name="schema" type="com.deviousbard.salesforce.wsdl.SchemaDefinition" *#
public class ${schema.name} {

#foreach($type in $schema.complexTypes)
    // Complex Type Definition:  ${type.name}
    public class ${type.name} {
#foreach($element in $type.elements)
#if($element.baseType)
        public ${element.apexType} ${element.name};
#end
#if($element.simpleType)
        public ${element.simpleTypeApexType} ${element.name} {
            get;
            set {
                new ${element.apexType}().validate(value, '${element.name}');
                ${element.name} = value;
            }
        }
#end
#if($element.complexType)
        public ${element.apexType}#if($element.multiOccurring)[]#end ${element.name};
#end
#end
#foreach($attribute in $type.attributes)
        public String ${attribute.name}#if($attribute.hasFixedValue) = '${attribute.fixedValue}'#end#if($attribute.hasDefaultValue) = '${attribute.defaultValue}'#end;
#end
#foreach($element in $type.elements)
        private String[] ${element.name}_type_info = new String[] {'${element.name}','${element.elementNamespace}','${element.type}','${element.minOccurs}', '${element.maxOccurs}','${element.nilable}'};
#end
#foreach($attribute in $type.attributes)
        private String[] ${attribute.name}_att_info = new String[] {'${attribute.name}'};
#end
        private String[] apex_schema_type_info = new String[] {'${schema.namespace}','${schema.elementFormQualified}','${schema.attributeFormQualified}'};
        private String[] field_order_type_info = new String[] {#foreach($element in $type.elements)'${element.name}'#if($foreach.hasNext),#end#end};
    }

#end

#foreach($type in $schema.simpleTypes)
    // Simple Type Definition:  ${type.name}
    public class ${type.name} {
#if($type.enumerated)
        Set<String> enumerations = new Set<String> {#foreach($enumeration in $type.enumerations)'${enumeration}'#if($foreach.hasNext),#end#end};
#end
        public void validate(${type.apexType} value, String elementName) {
#if($type.minLengthRestricted)
            if (value.length() < ${type.minLength}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is too short for "${type.name}". The minimum length is ${type.minLength}');
            }
#end
#if($type.maxLengthRestricted)
            if (value.length() > ${type.maxLength}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is too long for "${type.name}". The maximum length is ${type.maxLength}');
            }
#end
#if($type.lengthRestricted)
            if (value.length() != ${type.length}) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" length is invalid for "${type.name}". The length must be exactly ${type.length}');
            }
#end
#if($type.enumerated)
            if (!enumerations.contains(value)) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" is not a valid value for "${type.name}"');
            }
#end
#if($type.regexPatternRestricted)
            if (!Pattern.matches('${type.regexPattern}', value)) {
                throw new ${schema.name}.SchemaValidationException('Element ' + '"' + elementName + '": '+ '"' + value + '" for "${type.name}" does not match the pattern "${type.regexPattern}"');
            }
#end
        }
    }
#end

#foreach($service in $wsdl.services)
    // Web Service Class: ${service.name}
    public class ${service.name} {
        public String endpoint_x = '${service.endPoint}';
        public Map<String, String> inputHttpHeaders_x;
        public Map<String, String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
#foreach($operation in $service.operations)
        public ${operation.inputHeaderTypeNamespace}.${operation.inputHeaderType} ${operation.inputHeaderName};
        private String ${operation.inputHeaderName}_hns = '${operation.inputHeaderName}=${operation.inputHeaderNamespace}';
        private String[] ns_map_type_info = new String[] {#foreach($namespace in $ApexUtility.getApexClassNamespaces())'${namespace}','${ApexUtility.getApexClassFromNamespace($namespace)}'#if($foreach.hasNext),#end#end};
#end

        public ${service.name}() {
        }

#foreach($operation in $service.operations)
        // Web Service Operation: ${operation.name}
        public ${wsdl.apexClassName}.${operation.outputMessageName}_element ${operation.name}(#foreach($elementName in $operation.inputParameterElementNames)${operation.getInputParameterElementValue($elementName)}#if($foreach.hasNext), #end#end) {
            ${wsdl.apexClassName}.${operation.inputMessageName}_element request_x = new ${wsdl.apexClassName}.${operation.inputMessageName}_element();
            ${wsdl.apexClassName}.${operation.outputMessageName}_element response_x;
#foreach($elementName in $operation.inputParameterElementNames)
            request_x.${elementName} = ${elementName};
#end
            Map<String, ${wsdl.apexClassName}.${operation.outputMessageName}_element> response_map_x = new Map<String, ${wsdl.apexClassName}.${operation.outputMessageName}_element>();
            response_map_x.put('response_x', response_x);
            try {
                WebServiceCallout.invoke(
                    this,
                    request_x,
                    response_map_x,
                    new String[] {
                        endpoint_x,
                        '${operation.soapAction}',
                        '${operation.inputMessageNamespace}',
                        '${operation.inputMessageName}',
                        '${operation.outputMessageNamespace}',
                        '${operation.outputMessageName}',
                        '${wsdl.apexClassName}.${operation.outputMessageName}_element'
                    }
                );
            } catch (CalloutException ce) {
                throw ce;
            }
            response_x = response_map_x.get('response_x');
            return response_x;
        }
    }
#end
#end

    public class SchemaValidationException extends Exception {
    }
}